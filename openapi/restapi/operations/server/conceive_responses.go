// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"battle_of_psychics/openapi/models"
)

// ConceiveOKCode is the HTTP code returned for type ConceiveOK
const ConceiveOKCode int = 200

/*
ConceiveOK OK

swagger:response conceiveOK
*/
type ConceiveOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Response小onceive `json:"body,omitempty"`
}

// NewConceiveOK creates ConceiveOK with default headers values
func NewConceiveOK() *ConceiveOK {

	return &ConceiveOK{}
}

// WithPayload adds the payload to the conceive o k response
func (o *ConceiveOK) WithPayload(payload []*models.Response小onceive) *ConceiveOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the conceive o k response
func (o *ConceiveOK) SetPayload(payload []*models.Response小onceive) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConceiveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Response小onceive, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (o *ConceiveOK) ConceiveResponder() {}

// ConceiveUnauthorizedCode is the HTTP code returned for type ConceiveUnauthorized
const ConceiveUnauthorizedCode int = 401

/*
ConceiveUnauthorized incorrect api key auth

swagger:response conceiveUnauthorized
*/
type ConceiveUnauthorized struct {
}

// NewConceiveUnauthorized creates ConceiveUnauthorized with default headers values
func NewConceiveUnauthorized() *ConceiveUnauthorized {

	return &ConceiveUnauthorized{}
}

// WriteResponse to the client
func (o *ConceiveUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

func (o *ConceiveUnauthorized) ConceiveResponder() {}

// ConceiveNotFoundCode is the HTTP code returned for type ConceiveNotFound
const ConceiveNotFoundCode int = 404

/*
ConceiveNotFound a session with such a token was not found

swagger:response conceiveNotFound
*/
type ConceiveNotFound struct {
}

// NewConceiveNotFound creates ConceiveNotFound with default headers values
func NewConceiveNotFound() *ConceiveNotFound {

	return &ConceiveNotFound{}
}

// WriteResponse to the client
func (o *ConceiveNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

func (o *ConceiveNotFound) ConceiveResponder() {}

// ConceiveInternalServerErrorCode is the HTTP code returned for type ConceiveInternalServerError
const ConceiveInternalServerErrorCode int = 500

/*
ConceiveInternalServerError internal error

swagger:response conceiveInternalServerError
*/
type ConceiveInternalServerError struct {
}

// NewConceiveInternalServerError creates ConceiveInternalServerError with default headers values
func NewConceiveInternalServerError() *ConceiveInternalServerError {

	return &ConceiveInternalServerError{}
}

// WriteResponse to the client
func (o *ConceiveInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}

func (o *ConceiveInternalServerError) ConceiveResponder() {}

type ConceiveNotImplementedResponder struct {
	middleware.Responder
}

func (*ConceiveNotImplementedResponder) ConceiveResponder() {}

func ConceiveNotImplemented() ConceiveResponder {
	return &ConceiveNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.Conceive has not yet been implemented",
		),
	}
}

type ConceiveResponder interface {
	middleware.Responder
	ConceiveResponder()
}
