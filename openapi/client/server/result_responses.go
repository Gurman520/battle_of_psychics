// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"battle_of_psychics/openapi/models"
)

// ResultReader is a Reader for the Result structure.
type ResultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewResultUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewResultNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewResultNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewResultInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewResultOK creates a ResultOK with default headers values
func NewResultOK() *ResultOK {
	return &ResultOK{}
}

/*
ResultOK describes a response with status code 200, with default header values.

ok
*/
type ResultOK struct {
	Payload []*models.ResponseResult
}

// IsSuccess returns true when this result o k response has a 2xx status code
func (o *ResultOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this result o k response has a 3xx status code
func (o *ResultOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this result o k response has a 4xx status code
func (o *ResultOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this result o k response has a 5xx status code
func (o *ResultOK) IsServerError() bool {
	return false
}

// IsCode returns true when this result o k response a status code equal to that given
func (o *ResultOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the result o k response
func (o *ResultOK) Code() int {
	return 200
}

func (o *ResultOK) Error() string {
	return fmt.Sprintf("[POST /Result][%d] resultOK  %+v", 200, o.Payload)
}

func (o *ResultOK) String() string {
	return fmt.Sprintf("[POST /Result][%d] resultOK  %+v", 200, o.Payload)
}

func (o *ResultOK) GetPayload() []*models.ResponseResult {
	return o.Payload
}

func (o *ResultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResultUnauthorized creates a ResultUnauthorized with default headers values
func NewResultUnauthorized() *ResultUnauthorized {
	return &ResultUnauthorized{}
}

/*
ResultUnauthorized describes a response with status code 401, with default header values.

incorrect api key auth
*/
type ResultUnauthorized struct {
}

// IsSuccess returns true when this result unauthorized response has a 2xx status code
func (o *ResultUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this result unauthorized response has a 3xx status code
func (o *ResultUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this result unauthorized response has a 4xx status code
func (o *ResultUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this result unauthorized response has a 5xx status code
func (o *ResultUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this result unauthorized response a status code equal to that given
func (o *ResultUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the result unauthorized response
func (o *ResultUnauthorized) Code() int {
	return 401
}

func (o *ResultUnauthorized) Error() string {
	return fmt.Sprintf("[POST /Result][%d] resultUnauthorized ", 401)
}

func (o *ResultUnauthorized) String() string {
	return fmt.Sprintf("[POST /Result][%d] resultUnauthorized ", 401)
}

func (o *ResultUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResultNotFound creates a ResultNotFound with default headers values
func NewResultNotFound() *ResultNotFound {
	return &ResultNotFound{}
}

/*
ResultNotFound describes a response with status code 404, with default header values.

a session with such a token was not found
*/
type ResultNotFound struct {
}

// IsSuccess returns true when this result not found response has a 2xx status code
func (o *ResultNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this result not found response has a 3xx status code
func (o *ResultNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this result not found response has a 4xx status code
func (o *ResultNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this result not found response has a 5xx status code
func (o *ResultNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this result not found response a status code equal to that given
func (o *ResultNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the result not found response
func (o *ResultNotFound) Code() int {
	return 404
}

func (o *ResultNotFound) Error() string {
	return fmt.Sprintf("[POST /Result][%d] resultNotFound ", 404)
}

func (o *ResultNotFound) String() string {
	return fmt.Sprintf("[POST /Result][%d] resultNotFound ", 404)
}

func (o *ResultNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResultNotAcceptable creates a ResultNotAcceptable with default headers values
func NewResultNotAcceptable() *ResultNotAcceptable {
	return &ResultNotAcceptable{}
}

/*
ResultNotAcceptable describes a response with status code 406, with default header values.

cannot call a method without first calling /Conceive
*/
type ResultNotAcceptable struct {
}

// IsSuccess returns true when this result not acceptable response has a 2xx status code
func (o *ResultNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this result not acceptable response has a 3xx status code
func (o *ResultNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this result not acceptable response has a 4xx status code
func (o *ResultNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this result not acceptable response has a 5xx status code
func (o *ResultNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this result not acceptable response a status code equal to that given
func (o *ResultNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the result not acceptable response
func (o *ResultNotAcceptable) Code() int {
	return 406
}

func (o *ResultNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /Result][%d] resultNotAcceptable ", 406)
}

func (o *ResultNotAcceptable) String() string {
	return fmt.Sprintf("[POST /Result][%d] resultNotAcceptable ", 406)
}

func (o *ResultNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResultInternalServerError creates a ResultInternalServerError with default headers values
func NewResultInternalServerError() *ResultInternalServerError {
	return &ResultInternalServerError{}
}

/*
ResultInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type ResultInternalServerError struct {
}

// IsSuccess returns true when this result internal server error response has a 2xx status code
func (o *ResultInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this result internal server error response has a 3xx status code
func (o *ResultInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this result internal server error response has a 4xx status code
func (o *ResultInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this result internal server error response has a 5xx status code
func (o *ResultInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this result internal server error response a status code equal to that given
func (o *ResultInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the result internal server error response
func (o *ResultInternalServerError) Code() int {
	return 500
}

func (o *ResultInternalServerError) Error() string {
	return fmt.Sprintf("[POST /Result][%d] resultInternalServerError ", 500)
}

func (o *ResultInternalServerError) String() string {
	return fmt.Sprintf("[POST /Result][%d] resultInternalServerError ", 500)
}

func (o *ResultInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
